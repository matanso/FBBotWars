/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.urctf.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A single square on the board
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-17")
public class Cell implements org.apache.thrift.TBase<Cell, Cell._Fields>, java.io.Serializable, Cloneable, Comparable<Cell> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Cell");

  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARMY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("armySize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TERRAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("terrain", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CellStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CellTupleSchemeFactory());
  }

  /**
   * The current team that occupies the square (could be <code>null</code> if unoccupied)
   * 
   * @see Team
   */
  public Team team; // optional
  /**
   * Number of units the occupying team has in the square
   */
  public int armySize; // required
  /**
   * Square's X coordinate
   */
  public int x; // required
  /**
   * Square's Y coordinate
   */
  public int y; // required
  /**
   * Terrain type in square
   * 
   * @see Terrain
   */
  public Terrain terrain; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The current team that occupies the square (could be <code>null</code> if unoccupied)
     * 
     * @see Team
     */
    TEAM((short)1, "team"),
    /**
     * Number of units the occupying team has in the square
     */
    ARMY_SIZE((short)2, "armySize"),
    /**
     * Square's X coordinate
     */
    X((short)3, "x"),
    /**
     * Square's Y coordinate
     */
    Y((short)4, "y"),
    /**
     * Terrain type in square
     * 
     * @see Terrain
     */
    TERRAIN((short)5, "terrain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM
          return TEAM;
        case 2: // ARMY_SIZE
          return ARMY_SIZE;
        case 3: // X
          return X;
        case 4: // Y
          return Y;
        case 5: // TERRAIN
          return TERRAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARMYSIZE_ISSET_ID = 0;
  private static final int __X_ISSET_ID = 1;
  private static final int __Y_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Team.class)));
    tmpMap.put(_Fields.ARMY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("armySize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TERRAIN, new org.apache.thrift.meta_data.FieldMetaData("terrain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Terrain.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Cell.class, metaDataMap);
  }

  public Cell() {
  }

  public Cell(
    int armySize,
    int x,
    int y,
    Terrain terrain)
  {
    this();
    this.armySize = armySize;
    setArmySizeIsSet(true);
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.terrain = terrain;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Cell(Cell other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeam()) {
      this.team = other.team;
    }
    this.armySize = other.armySize;
    this.x = other.x;
    this.y = other.y;
    if (other.isSetTerrain()) {
      this.terrain = other.terrain;
    }
  }

  public Cell deepCopy() {
    return new Cell(this);
  }

  @Override
  public void clear() {
    this.team = null;
    setArmySizeIsSet(false);
    this.armySize = 0;
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    this.terrain = null;
  }

  /**
   * The current team that occupies the square (could be <code>null</code> if unoccupied)
   * 
   * @see Team
   */
  public Team getTeam() {
    return this.team;
  }

  /**
   * The current team that occupies the square (could be <code>null</code> if unoccupied)
   * 
   * @see Team
   */
  public Cell setTeam(Team team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  /**
   * Number of units the occupying team has in the square
   */
  public int getArmySize() {
    return this.armySize;
  }

  /**
   * Number of units the occupying team has in the square
   */
  public Cell setArmySize(int armySize) {
    this.armySize = armySize;
    setArmySizeIsSet(true);
    return this;
  }

  public void unsetArmySize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARMYSIZE_ISSET_ID);
  }

  /** Returns true if field armySize is set (has been assigned a value) and false otherwise */
  public boolean isSetArmySize() {
    return EncodingUtils.testBit(__isset_bitfield, __ARMYSIZE_ISSET_ID);
  }

  public void setArmySizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARMYSIZE_ISSET_ID, value);
  }

  /**
   * Square's X coordinate
   */
  public int getX() {
    return this.x;
  }

  /**
   * Square's X coordinate
   */
  public Cell setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  /**
   * Square's Y coordinate
   */
  public int getY() {
    return this.y;
  }

  /**
   * Square's Y coordinate
   */
  public Cell setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  /**
   * Terrain type in square
   * 
   * @see Terrain
   */
  public Terrain getTerrain() {
    return this.terrain;
  }

  /**
   * Terrain type in square
   * 
   * @see Terrain
   */
  public Cell setTerrain(Terrain terrain) {
    this.terrain = terrain;
    return this;
  }

  public void unsetTerrain() {
    this.terrain = null;
  }

  /** Returns true if field terrain is set (has been assigned a value) and false otherwise */
  public boolean isSetTerrain() {
    return this.terrain != null;
  }

  public void setTerrainIsSet(boolean value) {
    if (!value) {
      this.terrain = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((Team)value);
      }
      break;

    case ARMY_SIZE:
      if (value == null) {
        unsetArmySize();
      } else {
        setArmySize((Integer)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case TERRAIN:
      if (value == null) {
        unsetTerrain();
      } else {
        setTerrain((Terrain)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM:
      return getTeam();

    case ARMY_SIZE:
      return getArmySize();

    case X:
      return getX();

    case Y:
      return getY();

    case TERRAIN:
      return getTerrain();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM:
      return isSetTeam();
    case ARMY_SIZE:
      return isSetArmySize();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case TERRAIN:
      return isSetTerrain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Cell)
      return this.equals((Cell)that);
    return false;
  }

  public boolean equals(Cell that) {
    if (that == null)
      return false;

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_armySize = true;
    boolean that_present_armySize = true;
    if (this_present_armySize || that_present_armySize) {
      if (!(this_present_armySize && that_present_armySize))
        return false;
      if (this.armySize != that.armySize)
        return false;
    }

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_terrain = true && this.isSetTerrain();
    boolean that_present_terrain = true && that.isSetTerrain();
    if (this_present_terrain || that_present_terrain) {
      if (!(this_present_terrain && that_present_terrain))
        return false;
      if (!this.terrain.equals(that.terrain))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team.getValue());

    boolean present_armySize = true;
    list.add(present_armySize);
    if (present_armySize)
      list.add(armySize);

    boolean present_x = true;
    list.add(present_x);
    if (present_x)
      list.add(x);

    boolean present_y = true;
    list.add(present_y);
    if (present_y)
      list.add(y);

    boolean present_terrain = true && (isSetTerrain());
    list.add(present_terrain);
    if (present_terrain)
      list.add(terrain.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Cell other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArmySize()).compareTo(other.isSetArmySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArmySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.armySize, other.armySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerrain()).compareTo(other.isSetTerrain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerrain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terrain, other.terrain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Cell(");
    boolean first = true;

    if (isSetTeam()) {
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("armySize:");
    sb.append(this.armySize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("terrain:");
    if (this.terrain == null) {
      sb.append("null");
    } else {
      sb.append(this.terrain);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'armySize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'x' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'y' because it's a primitive and you chose the non-beans generator.
    if (terrain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'terrain' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CellStandardSchemeFactory implements SchemeFactory {
    public CellStandardScheme getScheme() {
      return new CellStandardScheme();
    }
  }

  private static class CellStandardScheme extends StandardScheme<Cell> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Cell struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.team = com.facebook.urctf.protocol.Team.findByValue(iprot.readI32());
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARMY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.armySize = iprot.readI32();
              struct.setArmySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TERRAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.terrain = com.facebook.urctf.protocol.Terrain.findByValue(iprot.readI32());
              struct.setTerrainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetArmySize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'armySize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'x' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'y' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Cell struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          oprot.writeI32(struct.team.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ARMY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.armySize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      if (struct.terrain != null) {
        oprot.writeFieldBegin(TERRAIN_FIELD_DESC);
        oprot.writeI32(struct.terrain.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CellTupleSchemeFactory implements SchemeFactory {
    public CellTupleScheme getScheme() {
      return new CellTupleScheme();
    }
  }

  private static class CellTupleScheme extends TupleScheme<Cell> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Cell struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.armySize);
      oprot.writeI32(struct.x);
      oprot.writeI32(struct.y);
      oprot.writeI32(struct.terrain.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTeam()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTeam()) {
        oprot.writeI32(struct.team.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Cell struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.armySize = iprot.readI32();
      struct.setArmySizeIsSet(true);
      struct.x = iprot.readI32();
      struct.setXIsSet(true);
      struct.y = iprot.readI32();
      struct.setYIsSet(true);
      struct.terrain = com.facebook.urctf.protocol.Terrain.findByValue(iprot.readI32());
      struct.setTerrainIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.team = com.facebook.urctf.protocol.Team.findByValue(iprot.readI32());
        struct.setTeamIsSet(true);
      }
    }
  }

}

